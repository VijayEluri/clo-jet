/* The following code was generated by JFlex 1.4.1 on 2/18/09 12:08 AM */

/***** JFlex specification for Clojure *****/

package com.bitbakery.clojet.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.bitbakery.clojet.lexer.ClojureTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/18/09 12:08 AM from the specification file
 * <tt>src/com/bitbakery/clojet/lexer/clojure.flex</tt>
 */
public class _ClojureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\70\1\35"+
    "\1\7\2\16\1\101\1\76\1\37\1\40\1\5\1\14\1\100\1\71"+
    "\1\15\1\6\1\12\11\11\1\36\1\4\4\16\1\74\1\52\1\16"+
    "\1\56\1\57\1\13\1\53\1\16\1\64\1\55\2\16\1\60\1\51"+
    "\1\54\1\47\1\61\1\45\1\62\1\67\1\50\1\46\1\63\1\65"+
    "\1\72\1\66\1\16\1\43\1\17\1\44\1\75\1\16\1\77\1\27"+
    "\1\32\1\30\1\57\1\21\1\53\1\16\1\64\1\24\2\16\1\23"+
    "\1\51\1\20\1\47\1\26\1\45\1\33\1\25\1\31\1\34\1\63"+
    "\1\22\1\72\1\66\1\16\1\41\1\10\1\42\1\73\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\2\1\1\4\1\5\1\1\1\6"+
    "\1\2\7\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\5\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\2\0\1\26\1\0\1\27\1\30\4\5"+
    "\5\31\4\1\1\32\5\1\2\7\3\1\1\33\2\1"+
    "\1\34\1\1\1\35\2\0\1\5\4\0\1\36\1\37"+
    "\1\40\4\1\1\41\6\1\1\42\1\43\1\44\1\5"+
    "\3\0\1\45\1\46\1\47\1\50\3\1\1\51\2\1"+
    "\1\52\2\1\3\0\1\53\1\54\1\55\1\1\1\56"+
    "\4\1\2\0\15\1\1\57\1\60\1\1\1\61\1\62"+
    "\5\1\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\102\0\306\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630"+
    "\0\u0672\0\u014a\0\102\0\102\0\102\0\102\0\102\0\306"+
    "\0\u06b4\0\u06f6\0\u0738\0\102\0\102\0\u077a\0\u07bc\0\u07fe"+
    "\0\u014a\0\102\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\u014a\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\102\0\u0bdc\0\u0c1e\0\u0c60\0\u014a\0\u0ca2\0\u0ce4"+
    "\0\u014a\0\u0d26\0\102\0\u0d68\0\u0daa\0\u0dec\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u0ef4\0\u014a\0\u014a\0\u014a\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u014a\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u014a\0\u0738\0\u120c\0\u124e\0\u1290\0\u12d2\0\u014a"+
    "\0\u014a\0\u014a\0\u014a\0\u1314\0\u1356\0\u1398\0\u014a\0\u13da"+
    "\0\u141c\0\u014a\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u014a"+
    "\0\u014a\0\u014a\0\u15a8\0\u014a\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u1944\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u014a"+
    "\0\u014a\0\u1ad0\0\u014a\0\u014a\0\u1b12\0\u1b54\0\u1b96\0\u1bd8"+
    "\0\u1c1a\0\u014a\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\2\11\1\7\1\12\1\13\1\7\1\14\1\15\2\7"+
    "\1\16\1\17\1\20\2\7\1\21\1\22\1\7\1\23"+
    "\1\7\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\2\7\1\22\1\35\1\7\1\36\1\15"+
    "\1\17\1\21\1\37\1\16\1\7\1\23\1\40\3\7"+
    "\1\20\1\7\1\12\1\7\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\104\0\1\4\102\0\1\50\1\51"+
    "\75\0\1\51\2\52\1\51\3\6\1\51\5\6\1\51"+
    "\1\6\1\51\15\6\10\51\26\6\1\51\1\6\5\51"+
    "\4\0\3\7\1\0\5\7\1\0\1\7\1\0\15\7"+
    "\10\0\26\7\1\0\1\7\15\0\1\53\64\0\1\54"+
    "\1\55\7\0\3\7\1\0\1\7\2\11\1\56\1\7"+
    "\1\57\1\7\1\0\1\7\1\56\13\7\10\0\26\7"+
    "\1\0\1\7\11\0\3\7\1\0\1\7\1\60\1\61"+
    "\2\7\1\0\1\7\1\0\15\7\10\0\26\7\1\0"+
    "\1\7\16\0\2\57\73\0\3\62\1\0\5\62\1\0"+
    "\1\62\1\0\1\63\4\62\1\64\3\62\1\65\1\62"+
    "\1\66\2\62\7\0\26\62\1\0\1\62\11\0\3\7"+
    "\1\0\3\7\1\67\1\7\1\0\1\7\1\0\1\7"+
    "\1\67\2\7\1\70\10\7\10\0\10\7\1\70\15\7"+
    "\1\0\1\7\11\0\3\7\1\0\3\7\1\71\1\7"+
    "\1\0\1\7\1\0\1\7\1\71\13\7\10\0\2\7"+
    "\1\72\23\7\1\0\1\7\11\0\3\7\1\0\5\7"+
    "\1\0\1\7\1\0\15\7\10\0\6\7\1\73\17\7"+
    "\1\0\1\7\11\0\3\7\1\0\3\7\1\74\1\7"+
    "\1\0\1\7\1\0\1\7\1\74\13\7\10\0\26\7"+
    "\1\0\1\7\11\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\15\7\10\0\2\7\1\75\23\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\13\7"+
    "\1\76\1\7\10\0\15\7\1\76\1\7\1\77\6\7"+
    "\1\0\1\7\11\0\3\7\1\0\3\7\1\100\1\7"+
    "\1\0\1\7\1\0\1\7\1\100\13\7\10\0\26\7"+
    "\1\0\1\7\5\0\17\24\1\101\15\24\1\102\44\24"+
    "\4\0\3\25\1\0\5\25\1\0\1\25\1\0\15\25"+
    "\10\0\26\25\1\0\1\25\11\0\3\7\1\0\5\7"+
    "\1\0\1\7\1\0\14\7\1\103\10\0\1\7\1\103"+
    "\24\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\1\7\1\104\13\7\10\0\2\7\1\105"+
    "\23\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\1\106\6\7\1\107\5\7\10\0\5\7"+
    "\1\107\1\7\1\106\16\7\1\0\1\7\11\0\3\7"+
    "\1\0\3\7\1\110\1\7\1\0\1\7\1\0\1\7"+
    "\1\110\13\7\10\0\2\7\1\111\23\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\7\7"+
    "\1\112\5\7\10\0\5\7\1\112\20\7\1\0\1\7"+
    "\101\0\1\113\5\0\1\51\2\52\77\51\1\0\2\52"+
    "\77\0\5\53\1\114\2\53\1\115\71\53\4\0\3\7"+
    "\1\0\1\7\2\60\1\7\1\60\1\0\1\7\1\0"+
    "\15\7\10\0\24\7\1\60\1\7\1\0\1\7\16\0"+
    "\2\57\1\116\5\0\1\116\64\0\3\7\1\0\1\7"+
    "\2\60\2\7\1\0\1\7\1\0\15\7\10\0\26\7"+
    "\1\0\1\7\26\0\1\117\106\0\1\120\102\0\1\121"+
    "\73\0\1\122\64\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\2\7\1\123\12\7\10\0\20\7\1\123\5\7"+
    "\1\0\1\7\11\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\3\7\1\124\11\7\10\0\13\7\1\124\12\7"+
    "\1\0\1\7\11\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\11\7\1\125\3\7\10\0\3\7\1\125\22\7"+
    "\1\0\1\7\11\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\15\7\10\0\2\7\1\126\23\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\11\7"+
    "\1\127\3\7\10\0\3\7\1\127\22\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\1\130"+
    "\14\7\10\0\7\7\1\130\16\7\1\0\1\7\11\0"+
    "\3\7\1\0\5\7\1\0\1\7\1\0\14\7\1\131"+
    "\10\0\1\7\1\131\17\7\1\132\4\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\13\7"+
    "\1\133\1\7\10\0\15\7\1\133\10\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\10\7"+
    "\1\134\4\7\10\0\11\7\1\134\14\7\1\0\1\7"+
    "\5\0\1\24\2\0\77\24\4\0\3\7\1\0\5\7"+
    "\1\0\1\7\1\0\15\7\10\0\2\7\1\135\23\7"+
    "\1\0\1\7\11\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\11\7\1\136\3\7\10\0\3\7\1\136\22\7"+
    "\1\0\1\7\11\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\1\137\14\7\10\0\7\7\1\137\16\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\3\7\1\140\11\7\10\0\13\7\1\140\12\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\15\7\10\0\6\7\1\141\17\7\1\0\1\7\11\0"+
    "\3\7\1\0\5\7\1\0\1\7\1\0\13\7\1\142"+
    "\1\7\10\0\15\7\1\142\10\7\1\0\1\7\5\0"+
    "\5\53\1\114\1\0\100\53\1\114\1\53\1\143\1\115"+
    "\71\53\11\0\2\144\1\0\1\144\54\0\1\144\32\0"+
    "\1\145\106\0\1\146\104\0\1\62\100\0\1\147\54\0"+
    "\3\7\1\0\5\7\1\0\1\7\1\0\6\7\1\150"+
    "\6\7\10\0\14\7\1\150\11\7\1\0\1\7\11\0"+
    "\3\7\1\0\5\7\1\0\1\7\1\0\15\7\10\0"+
    "\23\7\1\151\2\7\1\0\1\7\11\0\3\7\1\0"+
    "\5\7\1\0\1\7\1\0\15\7\10\0\12\7\1\152"+
    "\13\7\1\0\1\7\11\0\3\7\1\0\3\7\1\153"+
    "\1\7\1\0\1\7\1\0\1\7\1\153\13\7\10\0"+
    "\26\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\15\7\10\0\2\7\1\154\23\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\14\7\1\155\10\0\1\7\1\155\24\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\11\7"+
    "\1\156\3\7\10\0\3\7\1\156\22\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\7\7"+
    "\1\157\5\7\10\0\5\7\1\157\20\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\4\7"+
    "\1\160\10\7\10\0\10\7\1\160\15\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\5\7"+
    "\1\161\7\7\10\0\22\7\1\161\3\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\1\162"+
    "\4\7\1\163\7\7\10\0\4\7\1\164\2\7\1\162"+
    "\12\7\1\163\3\7\1\0\1\7\16\0\2\144\112\0"+
    "\1\165\106\0\1\166\105\0\1\167\51\0\3\7\1\0"+
    "\5\7\1\0\1\7\1\0\2\7\1\170\12\7\10\0"+
    "\20\7\1\170\5\7\1\0\1\7\11\0\3\7\1\0"+
    "\5\7\1\0\1\7\1\0\13\7\1\171\1\7\10\0"+
    "\15\7\1\171\10\7\1\0\1\7\11\0\3\7\1\0"+
    "\3\7\1\172\1\7\1\0\1\7\1\0\1\7\1\172"+
    "\13\7\10\0\26\7\1\0\1\7\11\0\3\7\1\0"+
    "\5\7\1\0\1\7\1\0\11\7\1\173\3\7\10\0"+
    "\3\7\1\173\22\7\1\0\1\7\11\0\3\7\1\0"+
    "\3\7\1\174\1\7\1\0\1\7\1\0\1\7\1\174"+
    "\13\7\10\0\26\7\1\0\1\7\11\0\3\7\1\0"+
    "\5\7\1\0\1\7\1\0\11\7\1\175\3\7\10\0"+
    "\3\7\1\175\22\7\1\0\1\7\11\0\3\7\1\0"+
    "\3\7\1\176\1\7\1\0\1\7\1\0\1\7\1\176"+
    "\5\7\1\177\4\7\1\200\10\0\1\7\1\200\3\7"+
    "\1\177\20\7\1\0\1\7\31\0\1\201\76\0\1\62"+
    "\113\0\1\202\52\0\3\7\1\0\5\7\1\0\1\7"+
    "\1\0\15\7\10\0\2\7\1\203\23\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\13\7"+
    "\1\204\1\7\10\0\15\7\1\204\10\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\11\7"+
    "\1\205\3\7\10\0\3\7\1\205\22\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\10\7"+
    "\1\206\4\7\10\0\11\7\1\206\14\7\1\0\1\7"+
    "\11\0\3\7\1\0\5\7\1\0\1\7\1\0\3\7"+
    "\1\207\11\7\10\0\13\7\1\207\12\7\1\0\1\7"+
    "\25\0\1\166\101\0\1\62\65\0\3\7\1\0\5\7"+
    "\1\0\1\7\1\0\13\7\1\210\1\7\10\0\15\7"+
    "\1\210\10\7\1\0\1\7\11\0\3\7\1\0\5\7"+
    "\1\0\1\7\1\0\14\7\1\211\10\0\1\7\1\211"+
    "\24\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\15\7\10\0\17\7\1\212\6\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\13\7\1\213\1\7\10\0\15\7\1\213\10\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\11\7\1\214\3\7\10\0\3\7\1\214\22\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\15\7\10\0\24\7\1\215\1\7\1\0\1\7\11\0"+
    "\3\7\1\0\5\7\1\0\1\7\1\0\10\7\1\216"+
    "\4\7\10\0\11\7\1\216\14\7\1\0\1\7\11\0"+
    "\3\7\1\0\5\7\1\0\1\7\1\0\15\7\10\0"+
    "\2\7\1\217\23\7\1\0\1\7\11\0\3\7\1\0"+
    "\5\7\1\0\1\7\1\0\15\7\10\0\2\7\1\220"+
    "\23\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\4\7\1\221\10\7\10\0\10\7\1\221"+
    "\15\7\1\0\1\7\11\0\3\7\1\0\3\7\1\222"+
    "\1\7\1\0\1\7\1\0\1\7\1\222\13\7\10\0"+
    "\26\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\11\7\1\223\3\7\10\0\3\7\1\223"+
    "\22\7\1\0\1\7\11\0\3\7\1\0\5\7\1\0"+
    "\1\7\1\0\15\7\10\0\12\7\1\224\13\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\1\225\14\7\10\0\7\7\1\225\15\7\1\226\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\11\7\1\227\3\7\10\0\3\7\1\227\22\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\4\7\1\230\10\7\10\0\10\7\1\230\15\7\1\0"+
    "\1\7\11\0\3\7\1\0\3\7\1\231\1\7\1\0"+
    "\1\7\1\0\1\7\1\231\13\7\10\0\26\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\11\7\1\232\3\7\10\0\3\7\1\232\22\7\1\0"+
    "\1\7\11\0\3\7\1\0\5\7\1\0\1\7\1\0"+
    "\13\7\1\233\1\7\10\0\15\7\1\233\10\7\1\0"+
    "\1\7\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7260];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\21\1\6\11\7\1\5\11"+
    "\2\0\1\1\1\0\2\11\4\1\1\11\17\1\1\11"+
    "\10\1\1\11\2\0\1\1\4\0\22\1\3\0\15\1"+
    "\3\0\11\1\2\0\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    StringBuffer string = new StringBuffer();


  public _ClojureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ClojureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { return IF;
          }
        case 53: break;
        case 35: 
          { return VAR;
          }
        case 54: break;
        case 12: 
          { return RIGHT_CURLY;
          }
        case 55: break;
        case 48: 
          { return DEFMULTI;
          }
        case 56: break;
        case 34: 
          { return DEF;
          }
        case 57: break;
        case 47: 
          { return DEFMACRO;
          }
        case 58: break;
        case 1: 
          { return SYMBOL;
          }
        case 59: break;
        case 44: 
          { return RECUR;
          }
        case 60: break;
        case 8: 
          { return KEYWORD;
          }
        case 61: break;
        case 19: 
          { return BACKQUOTE;
          }
        case 62: break;
        case 46: 
          { return FALSE;
          }
        case 63: break;
        case 9: 
          { return LEFT_PAREN;
          }
        case 64: break;
        case 20: 
          { return COMMA;
          }
        case 65: break;
        case 6: 
          { return DOT;
          }
        case 66: break;
        case 21: 
          { return REST;
          }
        case 67: break;
        case 52: 
          { return MONITOR_ENTER;
          }
        case 68: break;
        case 39: 
          { return COND;
          }
        case 69: break;
        case 7: 
          { return STRING_LITERAL;
          }
        case 70: break;
        case 36: 
          { return BLOCK_COMMENT;
          }
        case 71: break;
        case 51: 
          { return MONITOR_EXIT;
          }
        case 72: break;
        case 23: 
          { return METADATA;
          }
        case 73: break;
        case 49: 
          { return DEFSTRUCT;
          }
        case 74: break;
        case 14: 
          { return RIGHT_SQUARE;
          }
        case 75: break;
        case 3: 
          { return WHITESPACE;
          }
        case 76: break;
        case 22: 
          { return LINE_COMMENT;
          }
        case 77: break;
        case 18: 
          { return QUOTE;
          }
        case 78: break;
        case 30: 
          { return NEW;
          }
        case 79: break;
        case 5: 
          { return NUMERIC_LITERAL;
          }
        case 80: break;
        case 28: 
          { return DO;
          }
        case 81: break;
        case 10: 
          { return RIGHT_PAREN;
          }
        case 82: break;
        case 24: 
          { return VAR_QUOTE;
          }
        case 83: break;
        case 43: 
          { return THROW;
          }
        case 84: break;
        case 42: 
          { return DEFN;
          }
        case 85: break;
        case 38: 
          { return SET;
          }
        case 86: break;
        case 11: 
          { return LEFT_CURLY;
          }
        case 87: break;
        case 27: 
          { return FN;
          }
        case 88: break;
        case 25: 
          { return CHAR_LITERAL;
          }
        case 89: break;
        case 50: 
          { return DEFMETHOD;
          }
        case 90: break;
        case 31: 
          { return NIL;
          }
        case 91: break;
        case 4: 
          { return REGEX;
          }
        case 92: break;
        case 32: 
          { return LET;
          }
        case 93: break;
        case 45: 
          { return QUOTE_KEYWORD;
          }
        case 94: break;
        case 40: 
          { return TRUE;
          }
        case 95: break;
        case 17: 
          { return META;
          }
        case 96: break;
        case 2: 
          { return BAD_CHARACTER;
          }
        case 97: break;
        case 41: 
          { return META_KEYWORD;
          }
        case 98: break;
        case 37: 
          { return LOOP;
          }
        case 99: break;
        case 13: 
          { return LEFT_SQUARE;
          }
        case 100: break;
        case 15: 
          { return UNQUOTE;
          }
        case 101: break;
        case 16: 
          { return DEREF;
          }
        case 102: break;
        case 33: 
          { return TRY;
          }
        case 103: break;
        case 29: 
          { return UNQUOTE_SPLICE;
          }
        case 104: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
