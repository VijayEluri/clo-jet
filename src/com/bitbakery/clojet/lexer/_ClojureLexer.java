/* The following code was generated by JFlex 1.4.1 on 2/4/09 3:11 PM */

/***** JFlex specification for Clojure *****/

package com.bitbakery.clojet.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.bitbakery.clojet.lexer.ClojureTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/4/09 3:11 PM from the specification file
 * <tt>src/com/bitbakery/clojet/lexer/clojure.flex</tt>
 */
public class _ClojureLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\16\1\35"+
    "\1\7\3\16\1\60\1\36\1\37\1\5\1\14\1\61\1\14\1\15"+
    "\1\6\1\12\11\11\1\63\1\4\1\16\1\56\2\16\1\62\1\65"+
    "\1\16\1\66\1\52\1\13\1\51\1\16\1\54\1\43\2\16\1\44"+
    "\1\64\1\42\1\47\1\16\1\45\1\67\1\16\1\50\1\46\1\16"+
    "\1\53\3\16\1\40\1\17\1\41\2\16\1\57\1\27\1\32\1\30"+
    "\1\52\1\21\1\51\1\16\1\54\1\24\2\16\1\23\1\64\1\20"+
    "\1\47\1\26\1\45\1\33\1\25\1\31\1\34\1\16\1\22\3\16"+
    "\1\0\1\10\1\0\1\55\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\3\3\3\1\1\4\1\1\1\5\4\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\3\1\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\0\1\22\1\1"+
    "\1\0\4\4\3\1\1\23\2\7\1\1\1\24\1\1"+
    "\1\25\1\26\1\0\2\1\5\27\1\30\1\1\1\31"+
    "\1\1\1\32\2\0\1\33\4\0\1\34\1\1\1\35"+
    "\1\1\1\33\3\0\1\36\1\1\3\0\1\1\2\0"+
    "\1\1\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\70\0\250\0\340\0\u0118\0\u0150"+
    "\0\u0188\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0118"+
    "\0\u0310\0\70\0\70\0\70\0\70\0\u0348\0\u0380\0\u03b8"+
    "\0\70\0\u0118\0\70\0\70\0\u03f0\0\70\0\250\0\u0428"+
    "\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u0118\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0118\0\u0658\0\70\0\u0690\0\u0118\0\u06c8"+
    "\0\u0118\0\70\0\u0700\0\u0738\0\u0770\0\70\0\u07a8\0\u07e0"+
    "\0\u0818\0\u0850\0\u0118\0\u0888\0\u0118\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u0498\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0118\0\u0a80"+
    "\0\u0118\0\u0ab8\0\u0700\0\u0af0\0\u0b28\0\u0b60\0\u0118\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0118";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\7"+
    "\2\11\1\7\1\12\1\13\1\7\1\2\1\14\1\7"+
    "\1\15\1\16\1\17\4\7\1\20\3\7\1\21\1\22"+
    "\1\23\1\24\1\25\1\14\1\17\1\16\1\26\2\7"+
    "\1\20\1\27\1\30\1\15\1\7\1\31\1\32\1\33"+
    "\1\34\1\35\1\7\1\36\4\7\72\0\1\4\70\0"+
    "\1\37\1\40\63\0\1\40\2\41\1\40\13\6\1\40"+
    "\15\6\5\40\13\6\1\40\1\6\3\40\1\6\1\40"+
    "\4\6\4\0\13\7\1\0\15\7\5\0\13\7\1\0"+
    "\1\7\3\0\1\7\1\0\4\7\4\0\4\7\1\42"+
    "\6\7\1\43\15\7\5\0\13\7\1\0\1\7\3\0"+
    "\1\7\1\0\4\7\4\0\5\7\2\11\1\44\1\7"+
    "\1\45\1\7\1\0\1\7\1\44\13\7\5\0\13\7"+
    "\1\0\1\7\3\0\1\7\1\0\4\7\4\0\5\7"+
    "\1\46\1\47\4\7\1\0\15\7\5\0\13\7\1\0"+
    "\1\7\3\0\1\7\1\0\4\7\4\0\5\7\2\45"+
    "\4\7\1\0\15\7\5\0\13\7\1\0\1\7\3\0"+
    "\1\7\1\0\4\7\4\0\13\7\1\0\4\7\1\50"+
    "\10\7\5\0\1\7\1\50\11\7\1\0\1\7\3\0"+
    "\1\7\1\0\4\7\4\0\13\7\1\0\4\7\1\51"+
    "\10\7\5\0\1\7\1\51\11\7\1\0\1\7\3\0"+
    "\1\7\1\0\4\7\4\0\7\7\1\52\3\7\1\0"+
    "\1\7\1\52\13\7\5\0\13\7\1\0\1\7\3\0"+
    "\1\7\1\0\4\7\4\0\13\7\1\0\15\7\5\0"+
    "\7\7\1\53\3\7\1\0\1\7\3\0\1\7\1\0"+
    "\4\7\17\21\1\54\15\21\1\55\32\21\4\0\13\7"+
    "\1\0\14\7\1\56\5\0\4\7\1\56\6\7\1\0"+
    "\1\7\3\0\1\7\1\0\4\7\4\0\13\7\1\0"+
    "\1\57\14\7\5\0\1\57\12\7\1\0\1\7\3\0"+
    "\1\7\1\0\4\7\4\0\7\7\1\60\3\7\1\0"+
    "\1\7\1\60\13\7\5\0\5\7\1\61\5\7\1\0"+
    "\1\7\3\0\1\7\1\0\4\7\62\0\1\62\5\0"+
    "\1\40\2\41\65\40\1\0\2\41\65\0\4\63\1\42"+
    "\1\64\2\42\1\65\6\42\1\63\15\42\5\63\13\42"+
    "\1\63\1\42\3\63\1\42\1\63\4\42\4\0\13\66"+
    "\1\0\1\67\4\66\1\70\3\66\1\71\1\66\1\72"+
    "\2\66\4\0\13\66\1\0\1\66\3\0\1\66\1\0"+
    "\4\66\4\0\5\7\2\46\1\7\1\46\2\7\1\0"+
    "\15\7\5\0\13\7\1\0\1\7\3\0\1\7\1\0"+
    "\4\7\4\0\5\7\2\45\1\44\3\7\1\0\1\7"+
    "\1\44\13\7\5\0\13\7\1\0\1\7\3\0\1\7"+
    "\1\0\4\7\4\0\5\7\2\46\4\7\1\0\15\7"+
    "\5\0\13\7\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\4\0\13\7\1\0\3\7\1\73\11\7\5\0\2\7"+
    "\1\73\10\7\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\4\0\13\7\1\0\11\7\1\74\3\7\5\0\6\7"+
    "\1\74\4\7\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\4\0\13\7\1\0\11\7\1\75\3\7\5\0\6\7"+
    "\1\75\4\7\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\1\21\2\0\65\21\4\0\13\7\1\0\15\7\5\0"+
    "\5\7\1\76\5\7\1\0\1\7\3\0\1\7\1\0"+
    "\4\7\4\0\13\7\1\0\15\7\5\0\7\7\1\77"+
    "\3\7\1\0\1\7\3\0\1\7\1\0\4\7\5\63"+
    "\1\100\2\63\1\101\63\63\1\42\1\64\1\7\10\42"+
    "\1\63\15\42\5\63\13\42\1\63\1\42\3\63\1\42"+
    "\1\63\4\42\4\63\1\42\1\64\1\42\1\102\1\65"+
    "\6\42\1\63\15\42\5\63\13\42\1\63\1\42\3\63"+
    "\1\42\1\63\4\42\21\0\1\103\74\0\1\104\70\0"+
    "\1\105\61\0\1\106\52\0\13\7\1\0\15\7\5\0"+
    "\12\7\1\107\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\4\0\13\7\1\0\11\7\1\110\3\7\5\0\6\7"+
    "\1\110\4\7\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\4\0\13\7\1\0\1\111\14\7\5\0\1\111\12\7"+
    "\1\0\1\7\3\0\1\7\1\0\1\112\3\7\5\63"+
    "\1\100\1\0\66\63\1\100\1\63\1\113\1\101\57\63"+
    "\22\0\1\114\74\0\1\115\72\0\1\66\66\0\1\116"+
    "\42\0\7\7\1\117\3\7\1\0\1\7\1\117\13\7"+
    "\5\0\13\7\1\0\1\7\3\0\1\7\1\0\4\7"+
    "\4\0\13\7\1\0\7\7\1\120\5\7\5\0\13\7"+
    "\1\0\1\7\3\0\1\7\1\0\1\7\1\120\2\7"+
    "\23\0\1\121\74\0\1\122\73\0\1\123\37\0\13\7"+
    "\1\0\10\7\1\124\4\7\5\0\13\7\1\0\1\7"+
    "\3\0\1\7\1\0\2\7\1\124\1\7\24\0\1\125"+
    "\64\0\1\66\101\0\1\126\40\0\13\7\1\0\13\7"+
    "\1\127\1\7\5\0\13\7\1\0\1\7\3\0\1\7"+
    "\1\0\3\7\1\127\20\0\1\122\67\0\1\66\53\0"+
    "\13\7\1\0\15\7\5\0\5\7\1\130\5\7\1\0"+
    "\1\7\3\0\1\7\1\0\4\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\1\1\1\11\15\1\4\11\3\1\1\11"+
    "\1\1\2\11\1\1\1\11\2\0\2\1\1\0\11\1"+
    "\1\11\4\1\1\11\1\0\2\1\1\11\11\1\2\0"+
    "\1\1\4\0\5\1\3\0\2\1\3\0\1\1\2\0"+
    "\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    StringBuffer string = new StringBuffer();


  public _ClojureLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ClojureLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return COMMA;
          }
        case 32: break;
        case 15: 
          { return QUOTE;
          }
        case 33: break;
        case 22: 
          { return COMMA_AT;
          }
        case 34: break;
        case 18: 
          { return LINE_COMMENT;
          }
        case 35: break;
        case 23: 
          { return CHAR_LITERAL;
          }
        case 36: break;
        case 19: 
          { return IF;
          }
        case 37: break;
        case 2: 
          { return BAD_CHARACTER;
          }
        case 38: break;
        case 8: 
          { return LEFT_PAREN;
          }
        case 39: break;
        case 20: 
          { return FN;
          }
        case 40: break;
        case 14: 
          { return BACKQUOTE;
          }
        case 41: break;
        case 17: 
          { return COMPOSER;
          }
        case 42: break;
        case 24: 
          { return NIL;
          }
        case 43: break;
        case 10: 
          { return LEFT_SQUARE;
          }
        case 44: break;
        case 30: 
          { return QUOTE_KEYWORD;
          }
        case 45: break;
        case 9: 
          { return RIGHT_PAREN;
          }
        case 46: break;
        case 7: 
          { return STRING_LITERAL;
          }
        case 47: break;
        case 21: 
          { return DO;
          }
        case 48: break;
        case 4: 
          { return NUMERIC_LITERAL;
          }
        case 49: break;
        case 27: 
          { return BLOCK_COMMENT;
          }
        case 50: break;
        case 31: 
          { return DEFMACRO;
          }
        case 51: break;
        case 25: 
          { return LET;
          }
        case 52: break;
        case 1: 
          { return SYMBOL;
          }
        case 53: break;
        case 26: 
          { return DEF;
          }
        case 54: break;
        case 13: 
          { return EQ;
          }
        case 55: break;
        case 12: 
          { return TILDE;
          }
        case 56: break;
        case 29: 
          { return DEFN;
          }
        case 57: break;
        case 5: 
          { return DOT;
          }
        case 58: break;
        case 28: 
          { return WITH;
          }
        case 59: break;
        case 6: 
          { return TRUE;
          }
        case 60: break;
        case 3: 
          { return WHITESPACE;
          }
        case 61: break;
        case 11: 
          { return RIGHT_SQUARE;
          }
        case 62: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
